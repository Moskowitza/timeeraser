import{S as ho,i as uo,s as mo,e as s,t as n,k as f,c as l,a as r,h as p,d as t,m as c,b as ie,g as a,G as o,F as Et}from"./vendor-d4cd4022.js";function vo(to){let v,Te,ae,g,Le,se,x,Oe,le,y,oo=`<code class="language-undefined">git checkout dev
git reset --hard origin/dev</code>`,re,D,Ae,ne,k,io='<code class="language-undefined">git checkout -b 14999_request_PatientPageText</code>',pe,C,He,fe,w,Se,W,Ge,Me,ce,E,ao='<code class="language-undefined">git log</code>',he,I,We,ue,R,N,Ne,me,m,je,j,Ye,ze,Y,Fe,Ue,de,P,so=`<code class="language-undefined">pick e524ffb first commit
pick 5375461 spelling error
pick 547542b wip
pick 12b4e79 </code>`,ve,T,Be,we,q,lo=`<code class="language-undefined">pick e524ffb first commit
s 5375461 spelling error
s 547542b wip
s 12b4e79 </code>`,be,d,Je,z,Ke,Qe,F,Ve,_e,b,Xe,U,Ze,$e,ye,L,et,ke,O,B,tt,Ee,_,ot,J,it,at,Pe,A,K,st,qe,H,lt,ge,S,rt,xe,h,Q,nt,pt,V,ft,ct,X,ht,ut,Z,mt,dt,$,vt,wt,ee,bt,_t,te,yt,De,G,kt;return{c(){v=s("h1"),Te=n(eo),ae=f(),g=s("p"),Le=n(`At our company we have dev, qa, and production branches deployed to separate environments.
Deploys should occur after a gitbub pull request is approved and a new branch is merged.
New work should move through dev, to qa, and into our production branches.  There may be exceptions to this pattern, but this should be an exception.`),se=f(),x=s("p"),Oe=n("When starting new work, make sure you\u2019re up to date with what\u2019s currently in the repo."),le=f(),y=s("pre"),re=f(),D=s("p"),Ae=n(`When starting a new task work off a ticket branch that starts with a ticket number
Consider the name of the branch as a new feature, request, bug or another descriptor`),ne=f(),k=s("pre"),pe=f(),C=s("h3"),He=n("Clean commit history"),fe=f(),w=s("p"),Se=n(`I find the easiest way to clean my commits is with an interactive rebase.
`),W=s("code"),Ge=n("git log"),Me=n(" will get a list of past commits."),ce=f(),E=s("pre"),he=f(),I=s("p"),We=n("find the hash of the last commit you\u2019d like to squash to."),ue=f(),R=s("p"),N=s("code"),Ne=n("git rebase -i 1cfe17f9a"),me=f(),m=s("p"),je=n("git pick and squash, you\u2019ll now have a list of commits "),j=s("em"),Ye=n("after"),ze=n(` that commit you picked along with instructions
if you\u2019re using vi you\u2019ll need to use the keyboard to interact with what\u2019s in the terminal screen.
press the i key to interact with the window
the up-down arrow keys to move around
escape key to get out of interactive mode
`),Y=s("code"),Fe=n(":wq"),Ue=n(" means save and quit and go to the next step in your rebase"),de=f(),P=s("pre"),ve=f(),T=s("p"),Be=n("from here I leave the first the commit and squash the rest"),we=f(),q=s("pre"),be=f(),d=s("p"),Je=n("Save and exit "),z=s("code"),Ke=n("escape key"),Qe=n(" and then "),F=s("code"),Ve=n(":wq"),_e=f(),b=s("p"),Xe=n("Provide new commit messages in a similar fashion. comment out old ones with a "),U=s("code"),Ze=n("#"),$e=n(", keep one comment or edit it now."),ye=f(),L=s("p"),et=n(`The commit history is now collapsed to a single commit.
Push this working branch to github. You can push AND  set an upstream at the same time.`),ke=f(),O=s("p"),B=s("code"),tt=n("git push --set-upstream origin 14999_request_PatientPageText"),Ee=f(),_=s("p"),ot=n("If the branch has already been pushed to github, you will need to over right the history on the remote using the "),J=s("code"),it=n("-f"),at=n(" flag."),Pe=f(),A=s("p"),K=s("code"),st=n("git push 14999_request_PatientPageText -f"),qe=f(),H=s("h3"),lt=n("Writing PR Descriptions"),ge=f(),S=s("p"),rt=n(`Github provides an easy way to add formatted descriptors to PRs.
PRs should:`),xe=f(),h=s("ul"),Q=s("li"),nt=n("A link to ticket"),pt=f(),V=s("li"),ft=n("Description of what was done"),ct=f(),X=s("li"),ht=n("Developer comments on the approach, work that is not yet done, and what may be missing"),ut=f(),Z=s("li"),mt=n("Any actions needed by other team members (eg: new npm packages, changes to a config, breaking changes, or other reasons the code may not work as it has been)"),dt=f(),$=s("li"),vt=n("description and example api calls if applicable"),wt=f(),ee=s("li"),bt=n("link to postman collection if applicable"),_t=f(),te=s("li"),yt=n("Screenshot(s) if applicable"),De=f(),G=s("p"),kt=n(`Review your PR before sharing with the team, and letting them know it\u2019s ready for review.
If there is a merge conflict, resolve the conflict locally and push the changes back to github.`),this.h()},l(e){v=l(e,"H1",{});var i=r(v);Te=p(i,eo),i.forEach(t),ae=c(e),g=l(e,"P",{});var Pt=r(g);Le=p(Pt,`At our company we have dev, qa, and production branches deployed to separate environments.
Deploys should occur after a gitbub pull request is approved and a new branch is merged.
New work should move through dev, to qa, and into our production branches.  There may be exceptions to this pattern, but this should be an exception.`),Pt.forEach(t),se=c(e),x=l(e,"P",{});var qt=r(x);Oe=p(qt,"When starting new work, make sure you\u2019re up to date with what\u2019s currently in the repo."),qt.forEach(t),le=c(e),y=l(e,"PRE",{class:!0});var ro=r(y);ro.forEach(t),re=c(e),D=l(e,"P",{});var gt=r(D);Ae=p(gt,`When starting a new task work off a ticket branch that starts with a ticket number
Consider the name of the branch as a new feature, request, bug or another descriptor`),gt.forEach(t),ne=c(e),k=l(e,"PRE",{class:!0});var no=r(k);no.forEach(t),pe=c(e),C=l(e,"H3",{});var xt=r(C);He=p(xt,"Clean commit history"),xt.forEach(t),fe=c(e),w=l(e,"P",{});var Ce=r(w);Se=p(Ce,`I find the easiest way to clean my commits is with an interactive rebase.
`),W=l(Ce,"CODE",{});var Dt=r(W);Ge=p(Dt,"git log"),Dt.forEach(t),Me=p(Ce," will get a list of past commits."),Ce.forEach(t),ce=c(e),E=l(e,"PRE",{class:!0});var po=r(E);po.forEach(t),he=c(e),I=l(e,"P",{});var Ct=r(I);We=p(Ct,"find the hash of the last commit you\u2019d like to squash to."),Ct.forEach(t),ue=c(e),R=l(e,"P",{});var It=r(R);N=l(It,"CODE",{});var Rt=r(N);Ne=p(Rt,"git rebase -i 1cfe17f9a"),Rt.forEach(t),It.forEach(t),me=c(e),m=l(e,"P",{});var M=r(m);je=p(M,"git pick and squash, you\u2019ll now have a list of commits "),j=l(M,"EM",{});var Tt=r(j);Ye=p(Tt,"after"),Tt.forEach(t),ze=p(M,` that commit you picked along with instructions
if you\u2019re using vi you\u2019ll need to use the keyboard to interact with what\u2019s in the terminal screen.
press the i key to interact with the window
the up-down arrow keys to move around
escape key to get out of interactive mode
`),Y=l(M,"CODE",{});var Lt=r(Y);Fe=p(Lt,":wq"),Lt.forEach(t),Ue=p(M," means save and quit and go to the next step in your rebase"),M.forEach(t),de=c(e),P=l(e,"PRE",{class:!0});var fo=r(P);fo.forEach(t),ve=c(e),T=l(e,"P",{});var Ot=r(T);Be=p(Ot,"from here I leave the first the commit and squash the rest"),Ot.forEach(t),we=c(e),q=l(e,"PRE",{class:!0});var co=r(q);co.forEach(t),be=c(e),d=l(e,"P",{});var oe=r(d);Je=p(oe,"Save and exit "),z=l(oe,"CODE",{});var At=r(z);Ke=p(At,"escape key"),At.forEach(t),Qe=p(oe," and then "),F=l(oe,"CODE",{});var Ht=r(F);Ve=p(Ht,":wq"),Ht.forEach(t),oe.forEach(t),_e=c(e),b=l(e,"P",{});var Ie=r(b);Xe=p(Ie,"Provide new commit messages in a similar fashion. comment out old ones with a "),U=l(Ie,"CODE",{});var St=r(U);Ze=p(St,"#"),St.forEach(t),$e=p(Ie,", keep one comment or edit it now."),Ie.forEach(t),ye=c(e),L=l(e,"P",{});var Gt=r(L);et=p(Gt,`The commit history is now collapsed to a single commit.
Push this working branch to github. You can push AND  set an upstream at the same time.`),Gt.forEach(t),ke=c(e),O=l(e,"P",{});var Mt=r(O);B=l(Mt,"CODE",{});var Wt=r(B);tt=p(Wt,"git push --set-upstream origin 14999_request_PatientPageText"),Wt.forEach(t),Mt.forEach(t),Ee=c(e),_=l(e,"P",{});var Re=r(_);ot=p(Re,"If the branch has already been pushed to github, you will need to over right the history on the remote using the "),J=l(Re,"CODE",{});var Nt=r(J);it=p(Nt,"-f"),Nt.forEach(t),at=p(Re," flag."),Re.forEach(t),Pe=c(e),A=l(e,"P",{});var jt=r(A);K=l(jt,"CODE",{});var Yt=r(K);st=p(Yt,"git push 14999_request_PatientPageText -f"),Yt.forEach(t),jt.forEach(t),qe=c(e),H=l(e,"H3",{});var zt=r(H);lt=p(zt,"Writing PR Descriptions"),zt.forEach(t),ge=c(e),S=l(e,"P",{});var Ft=r(S);rt=p(Ft,`Github provides an easy way to add formatted descriptors to PRs.
PRs should:`),Ft.forEach(t),xe=c(e),h=l(e,"UL",{});var u=r(h);Q=l(u,"LI",{});var Ut=r(Q);nt=p(Ut,"A link to ticket"),Ut.forEach(t),pt=c(u),V=l(u,"LI",{});var Bt=r(V);ft=p(Bt,"Description of what was done"),Bt.forEach(t),ct=c(u),X=l(u,"LI",{});var Jt=r(X);ht=p(Jt,"Developer comments on the approach, work that is not yet done, and what may be missing"),Jt.forEach(t),ut=c(u),Z=l(u,"LI",{});var Kt=r(Z);mt=p(Kt,"Any actions needed by other team members (eg: new npm packages, changes to a config, breaking changes, or other reasons the code may not work as it has been)"),Kt.forEach(t),dt=c(u),$=l(u,"LI",{});var Qt=r($);vt=p(Qt,"description and example api calls if applicable"),Qt.forEach(t),wt=c(u),ee=l(u,"LI",{});var Vt=r(ee);bt=p(Vt,"link to postman collection if applicable"),Vt.forEach(t),_t=c(u),te=l(u,"LI",{});var Xt=r(te);yt=p(Xt,"Screenshot(s) if applicable"),Xt.forEach(t),u.forEach(t),De=c(e),G=l(e,"P",{});var Zt=r(G);kt=p(Zt,`Review your PR before sharing with the team, and letting them know it\u2019s ready for review.
If there is a merge conflict, resolve the conflict locally and push the changes back to github.`),Zt.forEach(t),this.h()},h(){ie(y,"class","language-undefined"),ie(k,"class","language-undefined"),ie(E,"class","language-undefined"),ie(P,"class","language-undefined"),ie(q,"class","language-undefined")},m(e,i){a(e,v,i),o(v,Te),a(e,ae,i),a(e,g,i),o(g,Le),a(e,se,i),a(e,x,i),o(x,Oe),a(e,le,i),a(e,y,i),y.innerHTML=oo,a(e,re,i),a(e,D,i),o(D,Ae),a(e,ne,i),a(e,k,i),k.innerHTML=io,a(e,pe,i),a(e,C,i),o(C,He),a(e,fe,i),a(e,w,i),o(w,Se),o(w,W),o(W,Ge),o(w,Me),a(e,ce,i),a(e,E,i),E.innerHTML=ao,a(e,he,i),a(e,I,i),o(I,We),a(e,ue,i),a(e,R,i),o(R,N),o(N,Ne),a(e,me,i),a(e,m,i),o(m,je),o(m,j),o(j,Ye),o(m,ze),o(m,Y),o(Y,Fe),o(m,Ue),a(e,de,i),a(e,P,i),P.innerHTML=so,a(e,ve,i),a(e,T,i),o(T,Be),a(e,we,i),a(e,q,i),q.innerHTML=lo,a(e,be,i),a(e,d,i),o(d,Je),o(d,z),o(z,Ke),o(d,Qe),o(d,F),o(F,Ve),a(e,_e,i),a(e,b,i),o(b,Xe),o(b,U),o(U,Ze),o(b,$e),a(e,ye,i),a(e,L,i),o(L,et),a(e,ke,i),a(e,O,i),o(O,B),o(B,tt),a(e,Ee,i),a(e,_,i),o(_,ot),o(_,J),o(J,it),o(_,at),a(e,Pe,i),a(e,A,i),o(A,K),o(K,st),a(e,qe,i),a(e,H,i),o(H,lt),a(e,ge,i),a(e,S,i),o(S,rt),a(e,xe,i),a(e,h,i),o(h,Q),o(Q,nt),o(h,pt),o(h,V),o(V,ft),o(h,ct),o(h,X),o(X,ht),o(h,ut),o(h,Z),o(Z,mt),o(h,dt),o(h,$),o($,vt),o(h,wt),o(h,ee),o(ee,bt),o(h,_t),o(h,te),o(te,yt),a(e,De,i),a(e,G,i),o(G,kt)},p:Et,i:Et,o:Et,d(e){e&&t(v),e&&t(ae),e&&t(g),e&&t(se),e&&t(x),e&&t(le),e&&t(y),e&&t(re),e&&t(D),e&&t(ne),e&&t(k),e&&t(pe),e&&t(C),e&&t(fe),e&&t(w),e&&t(ce),e&&t(E),e&&t(he),e&&t(I),e&&t(ue),e&&t(R),e&&t(me),e&&t(m),e&&t(de),e&&t(P),e&&t(ve),e&&t(T),e&&t(we),e&&t(q),e&&t(be),e&&t(d),e&&t(_e),e&&t(b),e&&t(ye),e&&t(L),e&&t(ke),e&&t(O),e&&t(Ee),e&&t(_),e&&t(Pe),e&&t(A),e&&t(qe),e&&t(H),e&&t(ge),e&&t(S),e&&t(xe),e&&t(h),e&&t(De),e&&t(G)}}}const $t={title:"Git Guide",slug:"cleanGit"},{title:eo,slug:_o}=$t;class wo extends ho{constructor(v){super();uo(this,v,null,vo,mo,{})}}var yo=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:wo,metadata:$t});export{yo as _};
